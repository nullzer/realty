<?php

function rt_page(){
    return 'test page';
}

function rt_access(){
    return TRUE;
}

function realty_entity_info(){
    return  array(
                'realty' => array(
                    'label' => t('Realty'),
                    'entity class' => 'Realty',
                    'controller class' => 'RealtyController',
                    'base table' => 'entity_realty',
                    'fieldable' => TRUE,
                    'entity keys' => array(
                        'id' => 'rid',
                        'bundle' => 'bundle_type',
                    ),
                    'bundle keys' => array(
                        'bundle' => 'bundle_type',
                    ),
                    'static cache' => TRUE,
                    'bundles' => array(
                         'realty_bundle' => array(
                            'label' => 'Realties bundle',
                            'admin' => array(
                                'path' => 'admin/structure/realty/manage',
                                'access arguments' => array('administer realty'),
                            ),
                         ),
                    ),
                    'load hook' => 'realty_load',
                    'view modes' => array(
                        'full' => array(
                            'label' => 'Default',
                            'custom settings' => FALSE,
                        ),
                    ),
                    'label callback' => 'entity_class_label',
                    'uri callback' => 'entity_class_uri',
                    'access callback' => 'realty_access',
                    'module' => 'realty',
                )
            );
}

function realty_permission(){
	return array(
		'view realty entities' => array(
			'title' => 'Просмотр ',
			'description' => '',
			'restrict access' => TRUE,
		),
		'create realty entities' => array(
			'title' => 'Создание ',
			'description' => '',
			'restrict access' => TRUE,
		),
		'edit realty entities' => array(
			'title' => 'Редактирование',
			'description' => '',
			'restrict access' => TRUE,
		),
		'delete realty entities' => array(
			'title' => 'Удаление',
			'description' => '',
			'restrict access' => TRUE,
		),
	);
}

function realty_access($op, $task, $account = NULL, $entity_type = NULL){
	global $user;
	
        if(!isset($account))
		$account = $user;

	switch($op){
		case 'view':
			return user_access('view realty entities',$account);
		break;
		case 'create':
			return user_access('create realty entities',$account);
		break;
		case 'edit':
			return user_access('edit realty entities',$account);
		break;
	};	
}

function realty_menu(){
	$realty_uri = 'realty/%realty';
	$realty_uri_arg_pos = 1;
	$items[$realty_uri] = array(
		'title callback' => 'entity_label',
		'title arguments' => array('realty',$realty_uri_arg_pos),
		'page callback' => 'realty_view',
		'page arguments' => array($realty_uri_arg_pos),
		'access callback' => 'entity_access',
		'access arguments' => array('view','realty',$realty_uri_arg_pos),
		'file' => 'realty.page.inc',
	);
	
	$items[$realty_uri.'/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
	);
        
        $items['realties/realty'] = array(
            'title' => 'Entity Realty',
            'page callback' => 'rt_info_page',
            'access arguments' => array('view realty entities'),
        );
        
        $items['admin/structure/realty/manage'] = array(
            'title' => 'Entity Realty',
            'description' => 'Test',
            'page callback' => 'realty_admin_page',
            'access arguments' => array('administer realty'),
        );
        
        $items['realties/add'] = array(
             'title' => 'Add an Realty Entity',
             'page callback' => 'realty_add',
             'access arguments' => array('create realty entities'),
        );

	return $items;
}

function realty_add() {
  $entity = entity_get_controller('realty')->create();
  return drupal_get_form('realty_form', $entity);
}

function realty_form($form, &$form_state, $entity) {
  $form['original'] = array(
    '#type' => 'textfield',
    '#title' => t('Original link'),
    '#required' => TRUE,
    '#default_value' => $entity->original,
  );

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('realty', $entity, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('realty_edit_delete'),
    '#weight' => 200,
  );

  return $form;
}

function realty_form_validate($form, &$form_state) {
  field_attach_form_validate('realty', $form_state['values']['basic_entity'], $form, $form_state);
}

function realty_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->original = $form_state['values']['original'];
  field_attach_submit('realty', $entity, $form, $form_state);
  $entity = realty_save($entity);
  $form_state['redirect'] = 'realty/'.$entity->rid;
}

function realty_edit_delete($form,&$form_state){
  $entity = $form_state['values']['basic_entity'];
  realty_delete($entity);
  drupal_set_message(t('The entity (ID %id) has been deleted',
    array('%id' => $entity->rid))
  );
  $form_state['redirect'] = 'node';
}

function realty_admin_page() {
  $content = array();
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('Administration page for Entity Realty.')
  );
  $content[] = array(
    '#type' => 'item',
    '#markup' => l(t('Add an Realty entity'), 'realties/add'),
  );

  //$content['table'] = entity_example_basic_list_entities();

  return $content;
}

function rt_info_page() {
  $content['preface'] = array(
    '#type' => 'item',
    '#markup' => t('The entity example provides a simple example entity.')
  );
  if (user_access('view realty entities')) {
    $content['preface']['#markup'] =  t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/entity_example_basic/manage'))
    );
  }
  //$content['table'] = rt_list_entities();

  return $content;
}

function rt_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = realty_load_multiple();
  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => $entity->rid,
          //'item_description' => l($entity->item_description, 'examples/entity_example/basic/' . $entity->basic_id),
          //'bundle' => $entity->bundle_type,
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('ID'), t('Item Description'), t('Bundle')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No entity_example_basic entities currently exist.'),
    );
  }
  return $content;
}


/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function realty_field_extra_fields() {
  $form_elements['original'] = array(
    'label' => t('Original'),
    'description' => t('Original link to content'),
    'weight' => -5,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );
  $display_elements['uid'] = array(
    'label' => t('Author'),
    'description' => t('User ID of realty'),
    'weight' => 0,
  );

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['realty']['realty_bundle']['form'] = $form_elements;
    
  $extra_fields['realty']['realty_bundle']['display'] = $display_elements;
  $extra_fields['realty']['realty_bundle']['display']['original'] = $form_elements['original'];
  return $extra_fields;
}

/* Class definition */
class Realty extends Entity{
	protected function defaultLabel(){
		return $this->identifier();
	}
	
	protected function defaultUri(){
		return array('path' => 'realty/'.$this->identifier());
	}
}

function realty_load($rid,$reset = FALSE){
	$realties = realty_load_multiple(array($rid),array(),$reset);
	return reset($realties);
}

function realty_load_multiple($rids = array(), $conditions = array(),$reset = FALSE){
	return entity_load('realty',$rids,$conditions,$reset);
}

function realty_save($realty){
	entity_save('realty',$realty);
}

function realty_delete($realty){
	entity_delete('realty',entity_id('realty',$realty));
}

function realty_delete_multiple($rids){
	entity_delete_multiple('realty',$rids);
}

function realty_entity_property_info_alter(&$info){
	$properties = &$info['ealty']['properties'];
	$properties['created'] = array(
		'label' => t('Date created'),
		'type' => 'date',
		'description' => 'lets tests this * realty',
		'setter callback' => 'entity_property_verbatim_set',
		'setter permission' => 'administer nodes',
		'schema field' => 'created',
	);
	$properties['uid'] = array(
		'label' => t('Author'),
		'type' => 'user',
		'setter callback' => 'entity_property_verbatim_set',
		'description' => 'Descr of this fck field',
		'setter permission' => 'administer nodes',
		'required' => TRUE,
		'schema field' => 'uid',
	);
	$properties['original'] = array(
		'label' => t('Original'),
		'type' => 'text',
		'description' => 'Link to the Original content',
		'setter callback' => 'entity_property_verbatim_set',
		'setter permission' => 'administer nodes',
		'required' => TRUE,
	);		
}

function realty_views_api(){
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'realty'),
  );
}
